version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: hoistscraper_user
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: hoistscraper_test
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hoistscraper_user -d hoistscraper_test"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      DATABASE_URL: postgresql://hoistscraper_user:testpassword@postgres:5432/hoistscraper_test
      REDIS_URL: redis://redis:6379
      DATA_DIR: /data
      PORT: 8000
      PYTHONUNBUFFERED: 1
    ports:
      - "8000:8000"
    volumes:
      - ./data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Worker
  worker:
    build:
      context: .
      dockerfile: backend/Dockerfile.worker
    environment:
      DATABASE_URL: postgresql://hoistscraper_user:testpassword@postgres:5432/hoistscraper_test
      REDIS_URL: redis://redis:6379
      DATA_DIR: /data
      PYTHONUNBUFFERED: 1
    volumes:
      - ./data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8000
      NODE_ENV: production
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_test_data: