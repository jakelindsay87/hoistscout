version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hoistscout-postgres
    environment:
      POSTGRES_DB: hoistscout
      POSTGRES_USER: hoistscout
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hoistscout123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hoistscout"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: hoistscout-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for document storage
  minio:
    image: minio/minio:latest
    container_name: hoistscout-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Ollama for local LLM
  ollama:
    image: ollama/ollama:latest
    container_name: hoistscout-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    # Pull models on startup
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "ollama serve &
      sleep 5 &&
      ollama pull llama3.1 &&
      ollama pull nomic-embed-text &&
      wait"

  # FlareSolverr for Cloudflare bypass
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: hoistscout-flaresolverr
    environment:
      - LOG_LEVEL=info
      - CAPTCHA_SOLVER=none
    ports:
      - "8191:8191"
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hoistscout-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://hoistscout:${POSTGRES_PASSWORD:-hoistscout123}@postgres:5432/hoistscout
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - OLLAMA_HOST=http://ollama:11434
      - FLARESOLVERR_URL=http://flaresolverr:8191
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - TWO_CAPTCHA_API_KEY=${TWO_CAPTCHA_API_KEY}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hoistscout-celery
    depends_on:
      - backend
      - redis
      - postgres
    environment:
      - DATABASE_URL=postgresql+asyncpg://hoistscout:${POSTGRES_PASSWORD:-hoistscout123}@postgres:5432/hoistscout
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - OLLAMA_HOST=http://ollama:11434
    volumes:
      - ./backend:/app
    command: celery -A app.worker worker --loglevel=info

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hoistscout-celery-beat
    depends_on:
      - backend
      - redis
    environment:
      - DATABASE_URL=postgresql+asyncpg://hoistscout:${POSTGRES_PASSWORD:-hoistscout123}@postgres:5432/hoistscout
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
    command: celery -A app.worker beat --loglevel=info

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hoistscout-frontend
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: hoistscout-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: hoistscout-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  postgres_data:
  redis_data:
  minio_data:
  ollama_data:
  prometheus_data:
  grafana_data: