version: '3.8'

services:
  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: hoistscraper-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-ssl.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: unless-stopped
    
  redis:
    image: redis:7-alpine
    container_name: hoistscraper-redis
    # No external ports exposed
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  db:
    image: postgres:16
    container_name: hoistscraper-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    # No external ports exposed
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: hoistscraper-backend
    env_file: .env.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    # No external ports exposed - nginx handles traffic
    volumes:
      - scraper_data:/data:rw
      - ./logs/backend:/app/logs:rw
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "1000:1000"  # Run as non-root user
    read_only: true    # Read-only root filesystem
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    container_name: hoistscraper-frontend
    env_file: .env.production
    depends_on:
      backend:
        condition: service_healthy
    # No external ports exposed - nginx handles traffic
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "1000:1000"  # Run as non-root user
    read_only: true    # Read-only root filesystem
    tmpfs:
      - /tmp
      - /app/.next/cache
    security_opt:
      - no-new-privileges:true

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: hoistscraper-worker
    env_file: .env.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    volumes:
      - scraper_data:/data:rw
      - ./logs/worker:/app/logs:rw
    networks:
      - app-network
    restart: unless-stopped
    user: "1000:1000"  # Run as non-root user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  ollama:
    image: ollama/ollama:latest
    container_name: hoistscraper-ollama
    # No external ports exposed
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app-network
    restart: unless-stopped
    environment:
      OLLAMA_HOST: 0.0.0.0
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  scraper_data:
    driver: local
  ollama_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
