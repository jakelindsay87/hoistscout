version: '3.8'

services:
  # Ollama service for AI-powered scraping
  ollama:
    image: ollama/ollama:latest
    container_name: hoistscout-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - hoistscout-network
    restart: unless-stopped
    environment:
      OLLAMA_HOST: 0.0.0.0
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: hoistscout-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hoistscout-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes

  # PostgreSQL database
  db:
    image: postgres:16
    container_name: hoistscout-db
    environment:
      POSTGRES_USER: hoistscout
      POSTGRES_PASSWORD: hoistscout123
      POSTGRES_DB: hoistscout
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hoistscout-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hoistscout"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.hoistscout-api
    container_name: hoistscout-api
    environment:
      DATABASE_URL: postgresql://hoistscout:hoistscout123@hoistscout-db:5432/hoistscout
      REDIS_URL: redis://hoistscout-redis:6379/0
      OLLAMA_BASE_URL: http://hoistscout-ollama:11434
      OLLAMA_MODEL: llama3.1
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      ENVIRONMENT: development
      DEMO_USER_ENABLED: "true"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - hoistscout-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker service
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.hoistscout-worker
    container_name: hoistscout-worker
    environment:
      DATABASE_URL: postgresql://hoistscout:hoistscout123@hoistscout-db:5432/hoistscout
      REDIS_URL: redis://hoistscout-redis:6379/0
      OLLAMA_BASE_URL: http://hoistscout-ollama:11434
      OLLAMA_MODEL: llama3.1
      PYTHONUNBUFFERED: "1"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - hoistscout-network
    restart: unless-stopped
    command: celery -A app.worker worker --loglevel=info

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.hoistscout-frontend
    container_name: hoistscout-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - hoistscout-network

  # Ollama model puller - runs once to download the model
  ollama-pull:
    image: ollama/ollama:latest
    container_name: hoistscout-ollama-pull
    depends_on:
      ollama:
        condition: service_healthy
    networks:
      - hoistscout-network
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Pulling llama3.1 model..."
        ollama pull llama3.1
        echo "Model pulled successfully!"
    restart: "no"

volumes:
  postgres_data:
  redis_data:
  ollama_data:

networks:
  hoistscout-network:
    driver: bridge